!function(d){var e;e={init:function(){this._menu(),this._slider(),this._select(),this._rangeSlide(),this._recherche(),this._popup(),this._fixedBar(),this._tabsNavigation(),this._showVideo(),this._filtre(),this._animate(),this._stickyBarTop()},_menu:function(){d(".btn-menu").on("click",function(){d(this).hasClass("open")?(d(this).removeClass("open"),d(".contentMenu").removeClass("active")):(d(this).addClass("open"),d(".contentMenu").addClass("active"))}),d(".btn-connection").on("hover click",function(e){d(this).find("span").slideToggle(100)})},_stickyBarTop:function(){d(".header").height()},_slider:function(){var e,i,n,t,s,o=3,c=d(".items .item").length;function a(){e.css({width:"0%"}),clearTimeout(t),s=0,n=!1,t=setInterval(l,10)}function l(){!1===n&&(s+=1/(o+.1),e.css({width:s+"%"}),100<=s&&(i.slick("slickNext"),a(),clearInterval(t),setTimeout(function(){t=setInterval(l,10)},2e3)))}function r(){d(".listeMoreOption").slick({autoplay:!1,speed:1e3,autoplaySpeed:5e3,dots:!0,arrows:!1,variableWidth:!0})}(i=d(".items")).slick({centerMode:!0,centerPadding:"0",slidesToShow:1,pauseOnDotsHover:!0,cssEase:"ease"}),d(".slick-active").addClass("show-infos"),e=d(".slider-progress .progress"),d(".slick-arrow").on("click",function(){s=0,e.css({width:"0%"})}),d(".items").on("beforeChange",function(e,i,n,t){d(".slick-active").removeClass("show-infos");var s=c-1,o=n===s,a=t===s,l=d(".item.slick-active");o&&l.next(".item").addClass("slick-clone-current"),a&&l.prev(".item").addClass("slick-clone-current")}),d(".items").on("afterChange",function(e,i,n,t){d(".slick-clone-current").removeClass("slick-clone-current"),d(".items").find("div").removeClass("show-infos"),setTimeout(function(){d(".slick-active").addClass("show-infos")},1e3)}),d(".contentSlider").on({mouseenter:function(){n=!0},mouseleave:function(){n=!1}}),a(),d(".listVehicule").slick({slidesToShow:1,variableWidth:!0,infinite:!1,arrows:!1}),d(".listVehicule").on("click","div",function(e){e.stopPropagation();var i=d(this).data("slick-index");d(".slick-slider").slick("slickCurrentSlide")!==i&&d(".slick-slider").slick("slickGoTo",i)}),window.innerWidth<768&&r(),d(window).resize(function(e){window.innerWidth<768?d(".listeMoreOption").hasClass("slick-initialized")||r():d(".listeMoreOption").hasClass("slick-initialized")&&d(".listeMoreOption").slick("unslick")})},_select:function(){d(".formSelect").selectric({optionsItemBuilder:function(e,i,n){return d(i).find("option").eq(n).data("icon")?'<span class="iconSelect"><img src="'+d(i).find("option").eq(n).data("icon")+'"></span>'+e.text:'<span class="space"></span>'+e.text}})},_rangeSlide:function(){d("#slider-range").slider({range:!0,min:0,max:500,values:[75,300],slide:function(e,i){d("#minValue").val(i.values[0]+"DH"),d("#maxValue").val(i.values[1]+"DH")}}),d("#minValue").val(d("#slider-range").slider("values",0)+"DH"),d("#maxValue").val(d("#slider-range").slider("values",1)+"DH")},_recherche:function(){d(".recherche .moreOption").click(function(e){e.preventDefault(),d(".contentRecherche").addClass("opened"),d(".blocMoreOptions").slideDown()}),d(".recherche .closeSearche").click(function(e){e.preventDefault(),d(".contentRecherche").removeClass("opened"),d(".blocMoreOptions").slideUp()})},_popup:function(){d(".plus-detail,.demande-devis").magnificPopup({type:"inline",fixedContentPos:!1,fixedBgPos:!0,overflowY:"auto",closeBtnInside:!0,preloader:!1,midClick:!0,removalDelay:300,mainClass:"my-mfp-zoom-in"})},_fixedBar:function(){d(window).scroll(function(){100<=d(window).scrollTop()?d(".innerFooter").addClass("fixed"):d(".innerFooter").removeClass("fixed")})},_tabsNavigation:function(){d(".rubTech").on("click",function(e){e.preventDefault(),d(this).hasClass("active")||(d(".rubTech").removeClass("active"),d(this).addClass("active"),dist=d(this).attr("href"),d(".boxInfos").hide(),d(dist).show())}),d(".detailInfosVehicule .linkDemandeDevis").on("click",function(e){e.preventDefault(),d("html, body").animate({scrollTop:d(d.attr(this,"href")).offset().top},500)})},_showVideo:function(){0<d(".image-video").length&&d(".image-video").each(function(e){d(this).on("click",function(){var e=d(this).next(),i=d(e).attr("data-src");i+="?autoplay=1&enablejsapi=1&version=3&";var n=d(e).attr("data-height"),t=d(this).find("img").height();d(e).css("height",t),d(this).hide();var s=document.createElement("iframe");d(s).attr("src",i),d(s).attr("height",n),d(s).attr("frameborder",0),d(s).attr("allow","autoplay"),d(s).attr("allowfullscreen","allowfullscreen"),d(e).html(s),d(e).show(),d(this).parent().parent()})})},_filtre:function(){d(".filtreBtn").on("click",function(e){e.preventDefault(),d(this).next().slideToggle()})},_animate:function(){var n,t;function e(){n=document.querySelectorAll(".hiddenElement"),t=window.innerHeight}function i(){for(var e=0;e<n.length;e++){var i=n[e];n[e].getBoundingClientRect().top-t<=0&&(i.classList.add("fade-in-element"),i.classList.remove("hiddenElement"))}}window.addEventListener("scroll",i),window.addEventListener("resize",e),e(),i()}},d(document).ready(function(){e.init()}),d(window).on("load",function(){}),d(window).resize(function(){}),d(window).scroll(function(){})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
